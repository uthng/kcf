#!/usr/bin/env bash
[[ -n $DEBUG ]] && set -x

set -eou pipefail

readonly SCRIPT_NAME="$(basename "$0")"
readonly FZF_OPTS=${FZF_OPTS:-"--ansi --no-preview --layout=reverse"}
readonly -a SUPPORTED_CMD=("exec" "logs" "describe" "delete" "rollout" "scale" "autoscale" "label" "annotate")
readonly -a CUSTOM_CMD=("kb" "ka" "kd" "tfwsa" "tfwsp" "tfwsd" "tfwsr")
readonly -a SUPPORTED_CMD_CONTAINER=("exec" "logs")
readonly -a SUPPORTED_CMD_MULTIPLE_SELECTION=("delete")

# Print usage or help of this script
function print_usage {
    cat <<EOF
    ${SCRIPT_NAME} wraps certain kubectl commands with fzf. It means that it allows you to select a resource corresponding to the specified type and perform the given command on it.

    ${SCRIPT_NAME} uses the same commands, resource types and options as kubectl.

    Usage: ${SCRIPT_NAME} <CMD> <TYPE> <OPTION1>...<OPTIONX>

    CMD:       $(array_join ", " "${SUPPORTED_CMD[@]}"), $(array_join ", " "${CUSTOM_CMD[@]}").
    TYPE:      all kubectl resource types supported by the above commands.
    OPTIONS:   all kubectl options normally used with the above commands & types.

    Examples:
    - Describe a pod in a given namespace:
      kcf describe pod -n istio-system

    - Execute a command shell in a container within a pod:
      kcf exec pod -n dsf-offer-catalog-orchestrator -- ls -la

    - Execute a interactive shell in a container within a pod:
      kcf exec pod -n dsf-offer-catalog-orchestrator -it -- bash

    - Watch logs of a container within a pod in a given namespace:
      kcf logs pod -n istio-system -f

    - Kustomize build in the specific folder
      kcf kb ./env
EOF
}

# Print log message with level and corresponding color
# Params:
#   $1: level
#   $2: message
# Return
#   string log message with date, level, program and color
#
# Examples:
#   log "INFO" "This is INFO level"
#   Returns: N/A
function log {
    local readonly level="$1"
    local readonly message="$2"
    local readonly timestamp=$(date +"%Y-%m-%d %H:%M:%S")
    local color=""
    local reset_color="$(tput sgr0)"

    if [[ "${level}" == "INFO" ]]; then
        color="$(tput setaf 2)"
    elif [[ "${level}" == "WARN" ]]; then
        color="$(tput setaf 3)"
    elif [[ "${level}" == "ERROR" ]]; then
        color="$(tput setaf 1)"
    fi

    >&2 echo -e "${color}${timestamp} [${level}] [$SCRIPT_NAME] ${message}${reset_color}"
}

# Print INFO log message
# Params:
#   $1: message
# Return
#   string log message with level INFO
#
# Examples:
#   log_info This is INFO level"
#   Returns: N/A
function log_info {
    local readonly message="$1"
    log "INFO" "$message"
}

# Print WARN log message
# Params:
#   $1: message
# Return
#   string log message with level WARN
#
# Examples:
#   log_warn This is WARN level"
#   Returns: N/A
function log_warn {
    local readonly message="$1"
    log "WARN" "$message"
}

# Print ERROR log message
# Params:
#   $1: message
# Return
#   string log message with level ERROR
#
# Examples:
#   log_error This is ERROR level"
#   Returns: N/A
function log_error {
    local readonly message="$1"
    log "ERROR" "$message"
}

# Assert non empty with exit
# Params:
#   $1: value
#   $2: error msg
# Return
#   N/A
#
# Examples:
#   assert_not_empty "${base_datadir}" "base_datadir must not be empty"
#   Returns: N/A
function assert_not_empty {
    local readonly value="$1"
    local readonly msg="$2"

    if [[ -z "${value}" ]]; then
        log_error "${msg}"
        exit 1
    fi
}

# Assert error with messsage and exit
# Params:
#   $1: returned value
#   $2: message error
# Return
#   N/A
#
# Examples:
#   assert_error "$ret" "Message error"
#   Returns: N/A
function assert_error {
    local readonly ret=$1
    local readonly msg="$2"

    if [ ${ret} -ne 0 ]
    then
        if [ "${msg}" != "" ]
        then
            log_err "${msg}"
        fi
        exit 1
    fi
}

# Check if an item is in the array
# Params:
#   $1: item
#   $2: array
# Return
#   index of element if found, -1 otherwise
#
# Examples:
#   array_contains "B" ("A", "B", "C")
#   Returns: "1"
function array_contains {
    local -r item="$1"
    shift
    local -ra arr=("$@")

    local nb=${#arr[@]}

    for (( i=0; i<${nb}; i++ )); do
        if [[ "${item}" == "${arr[$i]}" ]]; then
            echo "$i"
            return
        fi
    done

    echo "-1"
}

# Split a string to an array
# Params:
#   $1: separator
#   $2: string
# Return
#   an array
#
# Examples:
#   array_split "," "A,B,C"
#   Returns: ("A" "B" "C")
function array_split {
    local -r separator="$1"
    local -r str="$2"
    local -a arr=()

    #IFS="$separator" read -a arr <<<"$str"
    arr=($(echo "${str}" | tr "${separator}" "\n"))

    echo ${arr[*]}
}

# Join elements of an array with given separator
# Params:
#   $1: separator
#   $2: array
# Return
#   string
#
# Examples:
#   array_join "," ("A" "B" "C")
#   Returns: A,B,C
function array_join {
    local -r separator="$1"
    shift
    local -r arr_str="$@"

    echo "${arr_str// /${separator}}"
}

# Remove leading spaces, trailing spaces and 
# multiple spaces between words of a string
# Params:
#   $1: string
# Return
#   string
#
# Examples:
#   str_remove_spaces " aa     bb   cc  "
#   Returns: "aa bb cc"
function str_remove_spaces {
    local -r str="$1"

    echo -e "${str}" | sed 's/^ *//g;s/  */ /g;s/ *$//g'
}

# Get a list of containers within a pod
# Params:
#   $1: pod name
#   $2: options compatible with command `kubectl get pod`
# Return
#   string containing containers with separator newline "\n"
#
# Examples:
#   _kcf_get_pod_containers "grafana-5f68d98f87-hvmbb" "-n istio-system"
#   Returns: "grafana\nistio-proxy"
function _kcf_get_pod_containers {
    local -r podname="$1"
    local -r opts="$2"

    local str_opts=`str_remove_spaces "get pod/${podname} ${opts} -o jsonpath='{.spec.containers[*].name}'"`

    log_info "kubectl ${str_opts}"

    # Dont know why there are quote un the returned string.
    # So need to remove them and replace space by newline \n
    # to show correctly the list with fzf
    kubectl ${str_opts} | sed "s/\'//g" | tr " " "\n"
}

# Get header line of resource list and convert it to an array
function _kcf_get_resource_header {
    local -r resources="$1"

    local header=$(echo "$resources" | head -n 1)
}

# Get a list of names & shortnames from api-resources
# convert it to an array
function _kcf_get_api_resources {
    local -r api_resources=$(kubectl api-resources)
    # Get header line & convert it to an array of fields
    local -r header=$(echo "${api_resources}" | head -n 1)
    local -r arr_header=($(echo "${header}"))

    # Get position of each field in the header line
    local -r indexes=($(for f in "${arr_header[@]}"; do echo "${header}" | awk -v field=$f '{print index($0, field)}'; done))

    # Loop line by line and only print name & shortnames if exists
    # by computing the field's position & length
    local -r arr_resources=($(echo "${api_resources}" | tail -n +2 | awk -v idx_name=${indexes[0]} -v idx_shortname=${indexes[1]} -v idx_apigroup=${indexes[2]} '{printf "%s %s\n", substr($0, idx_name, (idx_shortname-idx_name)), substr($0, idx_shortname, (idx_apigroup-idx_shortname))}'))

    echo "${arr_resources[@]}"
}

function _kcf_colorize_resources {
    local -r type="$1"
    local -r resources="$2"

    case "${type}" in
        pods)
            echo "$(_kcf_colorize_type_pod "${resources}")"
            ;;
        *)
            echo "${resources}"
            ;;
    esac
}

# Colorize pod resources according to  their status.
function _kcf_colorize_type_pod {
    local -r resources="$1"
    local -r arr_header=($(echo "${resources}" | head -n 1))
    local -r cyan=$(tput setaf 006)
    local -r grey=$(tput setaf 245)
    local -r yellow=$(tput setaf 179)
    local -r red=$(tput setaf 001)
    local -r normal=$(tput sgr0)

    # Get automatically position of STATUS field from header line
    local -r idx_status=$(($(array_contains "STATUS" "${arr_header[@]}") + 1))

    echo "${resources}" | awk -v idx_status=${idx_status} -v cyan="${cyan}" -v grey="${grey}" -v yellow="${yellow}" -v red="${red}" -v normal="${normal}" '{
        # Only treat after header line
        if (NR > 1) {
            color = normal
            if ($idx_status == "Running") {
                color = cyan
            } else if ($idx_status == "Completed" || $idx_status == "Succeeded") {
                color = grey
            } else if ($idx_status == "Pending") {
                color = yellow
            } else {
                color = red
            }

            printf("%s%s%s\n", color, $0, normal)
        } else {
            printf("%s\n", $0)
        }
    }'
}

# Handle kustomize commands
function _kcf_kustomize_cmd {
    local -r cmd="$1"
    local path="."

    if [[ $# -ge 2 ]]; then
        path="$2"
    fi

    local -r folders=$(find ${path} -name "*kustomization*" | sed 's/kustomization.*$//g')
    assert_not_empty  "${folders}" "No folder containing one of 'kustomization.yaml', 'kustomization.yml' or 'Kustomization' in directory ${path}"

    local -r folder=$(echo "${folders}" | fzf ${FZF_OPTS} -m --header="Select a kustomize folder:")
    assert_not_empty "${folder}" "Folder must not be empty!"

    local -r kustomize_build="kustomize build ${folder}"
    local kustomize_cmd=""

    if [[ "${cmd}" == "kb" ]]; then
        kustomize_cmd="${kustomize_build}"
    elif [[ "${cmd}" == "ka" ]]; then
        kustomize_cmd="${kustomize_build} | kubectl apply -f -"
    elif [[ "${cmd}" == "kd" ]]; then
        kustomize_cmd="${kustomize_build} | kubectl delete -f -"
    else
        log_error "Kustomize command ${cmd} unknown!"
        return 1
    fi

    log_info "${kustomize_cmd}"
    eval "${kustomize_cmd}"
}

# Handle kustomize commands
function _kcf_terraform_cmd {
    local -r cmd="$1"
    local -r tfws=$(terraform workspace list | fzf ${FZF_OPTS} -m --header="Select a Terraform Workspace:")
    assert_not_empty "${tfws}" "A workspace must be selected!"

    terraform workspace select "${tfws//[\* ]/}"

    case "${cmd}" in
        tfwsp)
            terraform plan
            ;;
        tfwsa)
            terraform apply
            ;;
        tfwsd)
            terraform destroy
            ;;
        tfwsr)
            terraform delete "${tfws}"
            ;;
        *)
            log_error "Terraform command '${cmd}' unknown!"
            return 1
            ;;
    esac
}

# Execute custom commands
function _kcf_custom_cmd {
    local -r cmd="$1"

    case "${cmd}" in
        kb|ka|kd)
            _kcf_kustomize_cmd "$@"
            ;;
        tfwsp|tfwsa|tfwsd|tfwsr)
            _kcf_terraform_cmd "$@"
            ;;
        *)
            log_error "Custom command '${cmd}' not supported!"
            return 1
            ;;
    esac
}

# Parse options and execute kubectl commands
function _kcf_kubectl_cmd {
    local readonly cmd="$1"
    local readonly type="$2"
    shift 2

    local namespace=""
    local idx_ns=-1
    local idx_name=1
    local get_opts=""
    local cmd_opts=""
    local args=""

    while [[ $# > 0 ]]; do
        local key="$1"

        case "$key" in
            -n|--namespace)
                namespace="-n $2"
                shift 2
                ;;
            -A|--all-namespaces)
                #get_opts="${get_opts} ${key}"
                namespace="${key}"
                shift 1
                ;;
            --)
                args="${args} $@"
                shift $#
                ;;
            *)
                cmd_opts="${cmd_opts} ${key}"
                shift
                ;;
            esac
        done

    # Get resource list
    local str_opts="get ${type} ${namespace} ${get_opts}"
    log_info "kubectl ${str_opts}"
    local resources=$(kubectl ${str_opts})

    # Colorize eventually resource list
    resources=$(_kcf_colorize_resources "${type}" "${resources}")

    if [[ $(echo "$resources" | wc -l) -gt 1 ]]; then
        #echo "${resources}" | fzf | awk '{print $1}' | xargs -o -I % kubectl ${cmd} ${type}/% ${ns} ${args}

        # Special treatment in case of all namespace
        # because the kubectl default output will have an additional column namespace
        # Get the header line from resource output, then get position of namespace
        # and name fields from it.
        if [[ "${namespace}" == "-A" || "${namespace}" == "--all-namespaces" ]]; then
            local -a arr_header=($(echo "${resources}" | head -n 1))
            idx_ns=$(($(array_contains "NAMESPACE" "${arr_header[@]}") + 1))
            idx_name=$(($(array_contains "NAME" "${arr_header[@]}") + 1))
        fi

        local FZF_CUSTOM_OPTS=""
        local FZF_HEADER=""

        # Enable multi-select mode for commands: DELETE
        if [[ "$(array_contains "${cmd}" "${SUPPORTED_CMD_MULTIPLE_SELECTION[@]}")" != "-1" ]]; then
            FZF_CUSTOM_OPTS="${FZF_OPTS} -m"
            FZF_HEADER="Select one or multiple resources (using TAB):"
        else
            FZF_CUSTOM_OPTS="${FZF_OPTS}"
            FZF_HEADER="Select a resource:"
        fi

        # tail -n +2 to show all lines except for the header
        # awk according to the index values of the fields namespace and name in the header line
        read -a selected_resources <<< $(echo "${resources}" | tail -n +2 | fzf ${FZF_CUSTOM_OPTS} --header="${FZF_HEADER}"| awk -v idx_ns=${idx_ns} -v idx_name=${idx_name} -v default_ns="${namespace/-n /}" '{if (idx_ns > 0)  printf("%s %s ", $idx_name, $idx_ns); else if (default_ns != "") printf("%s %s ", $idx_name, default_ns); else printf("%s n/a", $idx_name)}')

        # we need to loop 'selected_resources' 2 per 2 to get resource name & namespace
        # and execute kubectl command for it
        for ((i=0; i<${#selected_resources[@]}; i=i+2 )); do
            local str_opts=""
            local resource_ns=""
            local resource_name="${selected_resources[$i]}"

            if [[ "${selected_resources[(($i+1))]}" != "n/a" ]]; then
                resource_ns="-n ${selected_resources[(($i+1))]}"
            fi

            str_opts="${cmd} ${type}/${resource_name} ${resource_ns} ${cmd_opts}"

            # Check if cmd needs to specify container
            if [[ "$(array_contains "${cmd}" "${SUPPORTED_CMD_CONTAINER[@]}")" != "-1" ]]; then
                # Must store the result into an intermediare variable because of
                # log_info in the function _kcf_get_pod_containers
                local containers=$(_kcf_get_pod_containers "${resource_name}" "${resource_ns}")
                local container=$(echo "${containers}"| fzf ${FZF_OPTS} --header="Select a container:" | awk '{print $1}')

                str_opts="${str_opts} -c ${container}"
            fi

            # Add args and clean spaces in the final option string
            str_opts=$(str_remove_spaces "${str_opts} ${args}")

            log_info "kubectl ${str_opts}"
            kubectl ${str_opts}
        done
    else
        log_warn "No resource found!"
    fi
}

# Main
function main {
    if [[ $# -lt 1 ]]; then
        log_error "No argument found!"
        print_usage
        exit 1
    else
        local readonly cmd="$1"

        # Check cmd. If cmd not supported, call kubectl instead.
        # Check cmd against list of kubectl supported commands
        if [[ "$(array_contains "${cmd}" "${SUPPORTED_CMD[@]}")" != "-1" ]]; then
            if [[ $# -ge 2 ]]; then
                local readonly type="$2"
                # Check resource type. If resource type is not in the list of api-resources
                # then return error.
                if [[ "$(array_contains "${type}" $(_kcf_get_api_resources))" == "-1" ]]; then
                    log_error "Resource type ${type} not supported!. Type 'kcf api-resources' to known more."
                    return 1
                fi

                _kcf_kubectl_cmd "$@"
                exit $?
            fi
        # Check cmd against list of custom commands
        elif [[ "$(array_contains "${cmd}" "${CUSTOM_CMD[@]}")" != "-1" ]]; then
            _kcf_custom_cmd "$@"
            exit $?
        else
            log_warn "${cmd} not supported! 'kubectl' will be used instead. Type 'kcf' to see help."
        fi
    fi

    kubectl "$@"
 }

main "$@"
